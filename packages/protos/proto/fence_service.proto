syntax = "proto3";

package weebi.fence.service;

import "common/chained_ids.proto";
import "common/empty.proto";
import "common/g_common.proto";
import "common/g_timestamp.proto";

import "user.proto";
import "user_permissions.proto";

import "firm.proto";
import "btq_chain.proto";
import "boutique.proto";
import "device.proto";

/// boutiques & users 
service FenceService {
  rpc signUp(weebi.user.SignUpRequest) returns (weebi.user.SignUpResponse);
  rpc authenticateWithCredentials (Credentials) returns (Tokens);
  rpc authenticateWithRefreshToken (RefreshToken) returns (Tokens);

  // removed below useless 2024 dec
  // rpc readUserPermissionsByToken(weebi.common.empty.Empty) returns (weebi.user.permissions.UserPermissions);
  // TODO: add quit / droit Ã  l'oubli like
  // allowing user added in an existing firm by mistake to signup again and start his/her own firm

  
  /// only one firm per 'company'
  /// 1. user signup and get a userId & create firm permission
  /// 2. A. user create a firm
  /// Chain and Boutique will be created by default and will use the same firmId
  /// Since createFirm also updates user permission, clientApp needs to reauthent using refresh right after
  /// 2. B. user joins a firm is a different use case detailed in createPendingUser rpc
  rpc createFirm(weebi.firm.CreateFirmRequest) returns (weebi.firm.CreateFirmResponse);
  rpc readOneFirm(weebi.common.empty.Empty) returns (weebi.firm.Firm);
  // TODO add updateFirm
  // TODO add deleteFirm

  rpc createPendingUser(weebi.user.PendingUserRequest) returns (weebi.user.PendingUserResponse);
  rpc readOneUser(UserId) returns (ReadOneUserResponse);
  
  /// Presumably, until 2030 firms will have max 9 users, why bother filter ?
  rpc readAllUsers(weebi.common.empty.Empty) returns (UsersPublic);
  
  // real update, not an upsert, does nothing if user not found
  rpc updateOneUser(weebi.user.UserPublic) returns (google.retail.common.StatusResponse);
  rpc updateUserPassword(PasswordUpdateRequest) returns (google.retail.common.StatusResponse);
  rpc deleteOneUser(UserId) returns (google.retail.common.StatusResponse);
  
  rpc createOneChain(weebi.chain.Chain) returns (google.retail.common.StatusResponse);
  rpc readAllChains(weebi.common.empty.Empty) returns (ReadAllChainsResponse);
  // only update fiels not boutiques, not upsert, do nothing if unfound
  rpc updateOneChain(ChainRequest) returns (google.retail.common.StatusResponse);
  rpc deleteOneChain(ChainRequest) returns (google.retail.common.StatusResponse);
  

  rpc createOneBoutique(BoutiqueRequest) returns (google.retail.common.StatusResponse);
  rpc readOneBoutique(BoutiqueRequest) returns (BoutiqueResponse);
  /// real update, not upsert, do nothing if unfound
  rpc updateOneBoutique(BoutiqueRequest) returns (google.retail.common.StatusResponse);
  rpc deleteOneBoutique(BoutiqueRequest) returns (google.retail.common.StatusResponse);
  // readBoutiques is not relevant since they are provided in readAllChains
   
  /// scans all firm's devices, disregarding user rights
  /// used both in : 
    /// weebi_app signups to REQUIRE that user pushes device data
    /// weebi_app device linking to PREVENT user from pushing data, pulling only
  // will be false by default, which is safer since it avoids corrupting data when linking new device that potentially weebi_app with different data
  rpc isOneDeviceInChain(ReadDevicesRequest) returns (IsOneDeviceInChainResponse);
  
  /// return only device visible according to user rights
  rpc readDevices(ReadDevicesRequest) returns (weebi.device.Devices);
  /// device enrolment follows a different process than user enrolment
  /// generateCodeForPairingDevice is called by web app, it includes chainId and boutiqueId
  /// A device belongs to a boutique 
  rpc generateCodeForPairingDevice(weebi.common.chained_ids.ChainIdAndboutiqueId) returns (CodeForPairingDevice);
  /// webapp listens to deviceStream awaiting PoS app to createDevice by typing the code
  rpc readOnePendingDevice(ReadDeviceBtqRequest) returns (weebi.device.Device);
  /// createDevice is called by mobile/desktop app  
  /// await lasts for 2 minutes (to be tested)
  /// remove pending
  rpc createDevice(PendingDeviceRequest) returns (CreateDeviceResponse);
  
  /// removed as it brings a security risk
  /// rpc authenticateWithDevice (DeviceCredentials) returns (Tokens);
  rpc updateDevicePassword(UpdateDevicePasswordRequest) returns (google.retail.common.StatusResponse);
  rpc deleteOneDevice(DeleteDeviceRequest) returns (google.retail.common.StatusResponse);
  /// weak auth hack to ease app access to cashiers with very low rights
}


/// 
message ChainRequest {
  string chainId = 1 ;
  string name = 2;
}

/// one boutique creation the server will assign the boutiqueId
message BoutiqueRequest {
  string chainId = 1 ;
  weebi.boutique.BoutiquePb boutique = 2;
  bytes logo = 3 ;
  string logoExtension = 4;
}
/// one boutique creation the server will assign the boutiqueId
message BoutiqueResponse {
  weebi.boutique.BoutiquePb boutique = 1;
  bytes logo = 2;
  string logoExtension = 3;
}



/// deviceId == userId, so front can reuse deviceId to try login in
/// remove pending
message CreateDeviceResponse {
  google.retail.common.StatusResponse statusResponse = 1 [json_name = 'statusResponse'];
  string firmId = 2 [json_name = 'firmId'];
  string chainId = 3 [json_name = 'chainId'];
  string boutiqueId = 4 [json_name = 'boutiqueId'];
  string deviceId = 5 [json_name = 'deviceId'];
}

message ReadOneUserResponse {
  google.retail.common.StatusResponse statusResponse = 1 [json_name = 'statusResponse'];
  weebi.user.UserPublic user = 2 [json_name = 'user'];
}

message UsersPublic {
  repeated weebi.user.UserPublic users = 1 [json_name = 'users'];
}

message ReadAllChainsResponse {
  // google.retail.common.StatusResponse ? 
  repeated weebi.chain.Chain chains = 1;
}

message ReadDevicesRequest {
  string chainId = 1;
}

message IsOneDeviceInChainResponse {
  bool isOneDevice = 1;
}

message ReadDeviceBtqRequest {
  string chainId = 1;
  string boutiqueId = 2;
}

message DeleteDeviceRequest {
  string chainId = 1; 
  weebi.device.Device device = 2 ;
}

message MailAndEncyptedPassword {
  string mail = 1;
  string passwordEncrypted = 2;
}

message UserId {
  string userId = 1;
}

message Access {
  weebi.user.permissions.ChainIds chainIds = 1 [json_name = 'chainIds'];
  weebi.user.permissions.BoutiqueIds boutiqueIds = 2 [json_name = 'boutiqueIds'];
}

message Credentials {
  string mail = 1;
  string password = 2;
}

message DeviceCredentials {
  string firmId = 1 ;
  string chainId = 2 ;
  string boutiqueId = 3;
  string deviceId = 4 ; 
  string password = 5 ;
}

message RefreshToken {
  string refreshToken = 1;
}

message Tokens {
  string accessToken = 1;
  string refreshToken = 2;
}

message UpdateDevicePasswordRequest {
  string chainId = 1; 
  weebi.device.Device device = 2 ;
}

message PasswordUpdateRequest {
  string userId = 1 [json_name = 'userId'];
  string firmId = 2 [json_name = 'firmId'];
  string password = 3 [json_name = 'password'];
}
message PendingDeviceRequest {
  weebi.device.HardwareInfo hardwareInfo = 1 ;
  int32 code = 2;
}

message CodeForPairingDevice {
  string firmId = 1 [json_name = 'firmId'];
  string chainId = 2 [json_name = 'chainId'];
  string boutiqueId = 3 [json_name = 'boutiqueId'];
  string userId = 4 [json_name = 'userId'];
  int32 code = 5 [json_name = 'code'];
  google.protobuf.Timestamp timestampUTC = 6 [json_name = 'timestampUTC'];
}

message ApproveDeviceRequest { 
  weebi.device.Device device = 1 ;
}
