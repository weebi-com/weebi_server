syntax = "proto3";

package weebi.article.service;

import "article/article.proto";
import "article/category.proto";
import "article/photo.proto";

import "common/g_common.proto";
import "common/g_timestamp.proto";

/// articles are contained in calibres
/// we keep article as the service name for clarity
/// but the list of objects are Calibres and we use calibreId
service ArticleService {
  rpc createOne (CalibreRequest) returns (google.retail.common.StatusResponse);
  rpc createMany (CalibresRequest) returns (google.retail.common.StatusResponse);

  rpc readOne (ReadCalibreRequest) returns (weebi.article.CalibrePb);
  /// use [lastFetchTimestampUTC] to only read the latest changes since last fetch
  rpc readAll (ReadAllRequest) returns  (CalibresResponse);
  rpc readAllIds (ReadIdsRequest) returns  (CalibresIdsResponse);
 
  /// update == upsert (replaceOne upsert)
  rpc updateOne (CalibreRequest) returns (google.retail.common.StatusResponse);
  /// hard delete
  rpc deleteOne (CalibreRequest) returns (google.retail.common.StatusResponse);
  

  ///
  /// category
  ///
  rpc createOneCategory (CategoryRequest) returns (google.retail.common.StatusResponse);
  rpc readOneCategory (FindCategoryRequest) returns (weebi.category.CategoryPb);
  rpc readAllCategories (ReadCategoriesRequest) returns  (CategoriesResponse);
  
  /// upsert works with replaceOne upsert true
  rpc updateOneCategory (CategoryRequest) returns (google.retail.common.StatusResponse);
  rpc deleteOneCategory (CategoryRequest) returns (google.retail.common.StatusResponse);
  
  ///
  /// photo
  ///
  rpc createOnePhoto (PhotoRequest) returns (google.retail.common.StatusResponse);
  rpc createManyPhotos (PhotosRequest) returns (google.retail.common.StatusResponse);
  rpc readOnePhoto (FindPhotoRequest) returns (weebi.photo.ArticlePhotoPb);
  
  /// use [lastFetchTimestampUTC] to only read the latest changes since last fetch
  rpc readAllPhotos (ReadPhotosRequest) returns  (PhotosResponse);

  /// upsert
  rpc updateOnePhoto (PhotoRequest) returns (google.retail.common.StatusResponse);
  rpc deleteOnePhoto (PhotoRequest) returns (google.retail.common.StatusResponse);

}

/// A Calibre includes Articles
message ReadCalibreRequest {
  string chainId = 1;
  string title = 2 ;
  int32 calibreId = 3 ;
}

message ReadAllRequest {
  string chainId = 1;
  // optional used for weebi_app device back online
  google.protobuf.Timestamp lastFetchTimestampUTC =  2 ; 
}

message CalibreRequest {
  // below in case mutiple chains, permission check will still be applied to verify 
  string chainId = 1; 
  weebi.article.CalibrePb calibre = 2;
}
message CalibresRequest {
  // below in case mutiple chains, permission check will still be applied to verify 
  string chainId = 1; 
  repeated weebi.article.CalibrePb calibres = 2;
}

message CalibresResponse {
  repeated weebi.article.CalibrePb calibres = 1;
}

message ReadIdsRequest {
  string chainId = 1;
}

/// include all ids so that offline device can delete objects removed by another user/device 
message CalibresIdsResponse {
  repeated int32 ids = 1;
}


/// categories
message FindCategoryRequest {
  string chainId = 1;
  string title = 2 ;
}

message ReadCategoriesRequest {
  string chainId = 1;
}

message CategoryRequest {
  // below in case mutiple chains, permission check will still be applied to verify 
  string chainId = 1; 
  weebi.category.CategoryPb category = 2;
}

message CategoriesResponse {
  repeated weebi.category.CategoryPb categories = 1;
}


/// Photos
message FindPhotoRequest {
  string chainId = 1;
  string calibreId = 2;
  string id = 3;
}

message ReadPhotosRequest {
  string chainId = 1;
  google.protobuf.Timestamp lastFetchTimestampUTC =  2 ; 
  int32 offset = 3;        //  Starting position (default 0)
  int32 limit = 4;         //  Batch size (default 100)
}

message PhotoRequest {
  string chainId = 1; 
  weebi.photo.ArticlePhotoPb photo = 2;
}
message PhotosRequest {
  string chainId = 1; 
  repeated weebi.photo.ArticlePhotoPb photos = 2;
}

message PhotosResponse {
  repeated weebi.photo.ArticlePhotoPb photos = 1;
  int32 total = 2;    
  int32 offset = 3;   
  bool hasMore = 4;        // More photos available?
  int32 batchSize = 5;
}