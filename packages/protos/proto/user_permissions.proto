syntax = "proto3";

package weebi.user.permissions;

/// leave userId && firmId empty for first 

/// Permissions encompass two notions : 
///  - access (chains and their boutiques boutiques)
///  - rights 
///   - CRUD on editable objects
///   - bool on certain action/screen in app

// ! addition in UserPermissions should also be applied in fence_service dummy
// if used by PoS by default might also be echoed in fence_service_base.dart in : 
/// - approveDevice()

/// would have been neat with a map but repeated maps not supported by protobuf

/*  message AccessChainsAndBoutiques {
   message AccessLimited {
     ChainIds chainIds = 1 [json_name = 'boutiqueIds'];
     BoutiqueIds boutiqueIds = 2 [json_name = 'boutiqueIds'];
   }
   message AccessFull {
    bool hasFullAccess = 1 [json_name = 'hasFullAccess'];
  }
  oneof access {
    AccessLimited limitedAccess = 1 [json_name = 'limitedAccess'];
    AccessFull fullAccess = 2 [json_name = 'fullAccess'];
  }
}
 */
message ChainIds {
  repeated string ids = 1 [json_name = 'ids'];
}
message BoutiqueIds {
  repeated string ids = 1 [json_name = 'ids'];
}
message AccessLimited {
  ChainIds chainIds = 1 [json_name = 'chainIds'];
  BoutiqueIds boutiqueIds = 2 [json_name = 'boutiqueIds'];
}
message AccessFull {
 bool hasFullAccess = 1 [json_name = 'hasFullAccess'];
}

message UserPermissions {
  string userId = 1 [json_name = 'userId'];
  string firmId = 2  [json_name = 'firmId'];
  oneof access {
    AccessLimited limitedAccess = 3 [json_name = 'limitedAccess'];
    AccessFull fullAccess = 4 [json_name = 'fullAccess'];
  } 
  TicketRights ticketRights = 6  [json_name = 'ticketRights'];
  ContactRights contactRights =  7 [json_name = 'contactRights'];
  ArticleRights articleRights =  8  [json_name = 'articleRights'];
  BoutiqueRights boutiqueRights = 9 [json_name = 'boutiqueRights'];
  // TODO: think about a deviceRights or at least something about device boolRights
  // TODO reanme below
  ChainRights chainRights =  10  [json_name = 'chainRights'];
  FirmRights firmRights =  11 [json_name = 'firmRights'];
  UserManagementRights userManagementRights =  12 [json_name = 'userManagementRights'];
  BillingRights billingRights = 13 [json_name = 'billingRights'];
  BoolRights boolRights = 14 [json_name = 'boolRights'];
  reserved 15 to 98;
}

/// user CRUD rights on base models 
enum Right {
  unknown = 0;
  create = 1;
  read = 2;
  update = 3;
  delete = 4;
}

message ArticleRights {
  repeated Right rights = 1 [json_name = 'articleRights'];
}
message BoutiqueRights {
  repeated Right rights = 1 [json_name = 'boutiqueRights'];
}
message ChainRights {
  repeated Right rights = 1 [json_name = 'chainRights'];
}
message FirmRights {
  repeated Right rights = 1 [json_name = 'firmRights'];
}
message ContactRights {
  repeated Right rights = 1 [json_name = 'contactRights'];
}

/// there is no such a thing as updating a ticket, one can simply disable or restore it
/// but for simplicity we will use the same enum Right here, including update
message TicketRights {
  repeated Right rights = 1 [json_name = 'ticketRights'];
}
message UserManagementRights {
  repeated Right rights = 1 [json_name = 'userManagementRights'];
}

message BillingRights {
  repeated Right rights = 1 [json_name = 'billingRights'];
}

message BoolRights {
  bool canSeeStats = 1 [json_name = 'canSeeStats'];
  bool canExportData = 2 [json_name = 'canExportData'];
  bool canGiveDiscount = 3 [json_name = 'canGiveDiscount'];
  bool canSetPromo = 4 [json_name = 'canSetPromo'];
  bool canStockMovement = 5 [json_name = 'canStockMovement'];
  bool canStockInventory = 6 [json_name = 'canStockInventory'];
  bool canQuickSpend = 7 [json_name = 'canQuickSpend'];
  bool canPurchase = 8 [json_name = 'canPurchase'];
  bool canImportTickets = 9 [json_name = 'canImportTickets'];
}

/// all users need to belong at least to a chain to see articles and contact
/// specific rights will then be checked to see what kind of action the user can perform on this chain's objects

/// TODO : for managers who will always need to access all boutiques of a chain
// add a property canAccessFutureBoutiques
// rework the createOneBoutique to update all users with matching boutique.chainId && canAccessFutureBoutiques == true


