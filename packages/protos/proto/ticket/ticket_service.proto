syntax = "proto3";

package weebi.ticket.service;

import "ticket/ticket.proto";
import "common/g_common.proto";
import "common/g_timestamp.proto";

service TicketService {
  /// allows to read tickets from all accessible boutiques
  /// no need to paginate yet, will conisder streaming
  rpc readAll (ReadAllTicketsRequest) returns  (TicketsResponse);
  rpc readOne (FindTicketRequest) returns (weebi.ticket.TicketPb);
  rpc createOne (TicketRequest) returns (google.retail.common.StatusResponse);
  rpc createMany (TicketsRequest) returns (google.retail.common.StatusResponse);
  
  rpc updateStatusOne (TicketRequest) returns (google.retail.common.StatusResponse);
  
  /// soft delete
  rpc deleteOne (TicketRequest) returns (google.retail.common.StatusResponse);
}

message ReadAllTicketsRequest {
  string chainId = 2;
  string boutiqueId = 3;
  // optional used for weebi_app device back online
  google.protobuf.Timestamp lastFetchTimestampUTC =  4 [json_name = 'lastFetchTimestampUTC']; 
  reserved 1 to 1;

}

message FindTicketRequest {
  // mandatory
  string ticketChainId = 1 [json_name = 'ticketChainId'];
  // mandatory
  string ticketBoutiqueId = 2 [json_name = 'ticketBoutiqueId'];
  string creationDate = 3 [json_name = 'creationDate'];
  string ticketUserId = 4 [json_name = 'ticketUserId'];
  int32 nonUniqueId = 5 [json_name = 'nonUniqueId'];
}

message TicketRequest {
  weebi.ticket.TicketPb ticket = 1 [json_name = 'ticket'];
}
message TicketsRequest {
  repeated weebi.ticket.TicketPb tickets = 1 [json_name = 'tickets'];
}

message TicketsResponse {
  repeated weebi.ticket.TicketPb tickets = 1;
}

